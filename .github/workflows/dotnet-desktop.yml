# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-2019  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: GitAnalyzer.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Release_Version: 1.0.0.0
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Nuget
      uses: nuget/setup-nuget@v1
        
    - name: Nuget restore
      run: nuget restore src/GitAnalyzer.sln
      
    - name: Build app for release
      run: msbuild src/GitAnalyzer.sln -t:rebuild -property:Configuration=Release
      
    - name: zip-files
      uses: vimtor/action-zip@v1
      with:
        files: src/bin/release
        dest: release.zip
    
    - name: Read build version
      id: read_build
      uses: juliangruber/read-file-action@v1.1.6
      with:
        path: src/Properties/AssemblyInfo.cs
        
    - name: regex match action
      id: regex_match 
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: 'AssemblyFileVersion\(\".*\"'
        regex_flags: 'gim'
        search_string: ${{ steps.read_build.outputs.content }}
        
    - name: regex match action
      id: regex_match2 
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '(\d[.]?)+'
        regex_flags: 'gim'
        search_string: ${{ steps.regex_match.outputs.first_match }}
        
    - name: set-env
      uses: allenevans/set-env@v2.0.0
      with:
        Release_Version: ${{ steps.regex_match.outputs.first_match }}
        
    - run: echo "version - ${{ steps.regex_match2.outputs.first_match }}"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: r${{ steps.regex_match2.outputs.first_match }}
        release_name: Release ${{ steps.regex_match2.outputs.first_match }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release.zip
        asset_name: git-big-files v${{ steps.regex_match2.outputs.first_match }}.zip
        asset_content_type: application/zip

