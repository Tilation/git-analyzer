name: Build .Net Framework & Release
on:
  pull_request:
    types: closed
    branches: 'main'
jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
    runs-on: windows-2019  
    env:
      PathToSolution: src
      SolutionName: GitAnalyzer.sln
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Nuget
      uses: nuget/setup-nuget@v1
        
    - name: Nuget restore
      run: nuget restore ${{env.PathToSolution}}/${{env.SolutionName}}
      
    - name: Build app for release
      run: msbuild ${{env.PathToSolution}}/${{env.SolutionName}} -t:rebuild -property:Configuration=Release
      
    - name: zip-files
      uses: vimtor/action-zip@v1
      with:
        files: ${{env.PathToSolution}}/bin/release
        dest: release.zip
    
    - name: Read build version
      id: read_build
      uses: juliangruber/read-file-action@v1.1.6
      with:
        path: ${{env.PathToSolution}}/Properties/AssemblyInfo.cs
        
    - name: regex match action
      id: regex_match 
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: 'AssemblyFileVersion\(\".*\"'
        regex_flags: 'gim'
        search_string: ${{ steps.read_build.outputs.content }}
        
    - name: regex match action
      id: regex_match2 
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '(\d[.]?)+'
        regex_flags: 'gim'
        search_string: ${{ steps.regex_match.outputs.first_match }}
        
    - name: set-env
      uses: allenevans/set-env@v2.0.0
      with:
        Release_Version: ${{ steps.regex_match.outputs.first_match }}
        
    - run: echo "version - ${{ steps.regex_match2.outputs.first_match }}"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-v${{ steps.regex_match2.outputs.first_match }}
        release_name: Release ${{ steps.regex_match2.outputs.first_match }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release.zip
        asset_name: git-big-files-v${{ steps.regex_match2.outputs.first_match }}.zip
        asset_content_type: application/zip
