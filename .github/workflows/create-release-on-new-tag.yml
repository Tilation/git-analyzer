name: Create release on new release tag
on:
  push:
    tags: 'v*'
    branches: 'main'

jobs:
  build:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: windows-2019  
    env:
      ReleaseVersion: not-set
      PathToPlugins: src/Plugins
      PathToVersionFile: src/GitAnalyzer/Properties/AssemblyInfo.cs
      PathToSolution: src
      SolutionName: GitAnalyzer.sln
      PathToBinaries: src/GitAnalyzer/bin/Release
      
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: echo ref
      run: echo ${{github.ref_name}}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Nuget
      uses: nuget/setup-nuget@v1

    - name: Nuget restore
      run: nuget restore ${{env.PathToSolution}}/${{env.SolutionName}}

    - name: Build app for release
      run: msbuild ${{env.PathToSolution}}/${{env.SolutionName}} -t:rebuild -property:Configuration=Release

    - name: Zip GitAnalyzer Release
      uses: vimtor/action-zip@v1
      with:
        files: ${{env.PathToBinaries}}
        dest: release.zip

    - name: Zip Plugins Solution
      uses: vimtor/action-zip@v1
      with:
        files: ${{env.PathToPlugins}}
        dest: plugins.zip

    - name: Generate Changelog
      id: changelog
      uses: loopwerk/tag-changelog@v1.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: ${{steps.changelog.outputs.changes }}
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release.zip
        asset_name: git-analyzer-v${{ github.ref_name }}.zip
        asset_content_type: application/zip

    - name: Upload Plugins Solution
      id: upload-plugins-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./plugins.zip
        asset_name: git-analyzer-plugin-creation-solution-v${{ github.ref_name }}.zip
        asset_content_type: application/zip
